name: Preview Branch Deployment

on:
  # Trigger on any pull request to any branch
  pull_request:
    types: [opened, synchronize, reopened, closed]
  
  # Trigger on push to any branch except main (for direct branch previews)
  push:
    branches-ignore: 
      - main

# Sets permissions for deployment
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write
  deployments: write

jobs:
  # Build and deploy preview for any branch
  build-preview:
    # Skip if PR is closed (we'll handle cleanup separately)
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract branch info
        id: branch-info
        run: |
          # Get branch name and author
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
            AUTHOR="${{ github.event.pull_request.user.login }}"
            PR_NUMBER="${{ github.event.number }}"
            CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
          else
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            AUTHOR="${{ github.actor }}"
            PR_NUMBER=""
            CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
          fi
          
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "author=$AUTHOR" >> $GITHUB_OUTPUT
          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "clean-branch=$CLEAN_BRANCH" >> $GITHUB_OUTPUT
          echo "preview-path=preview/$AUTHOR/$CLEAN_BRANCH" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check code quality
        run: |
          # Format check
          npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}" || {
            echo "‚ùå Code formatting issues found. Run 'npm run format' locally."
            exit 1
          }
          
          # Lint check
          npx next lint --strict

      - name: Build preview
        run: |
          # Create custom next config for preview
          cat > next.config.preview.js << EOF
          /** @type {import('next').NextConfig} */
          const nextConfig = {
            output: "export",
            basePath: "/klh-frontend/${{ steps.branch-info.outputs.preview-path }}",
            images: {
              unoptimized: true,
            },
            trailingSlash: true,
          };
          module.exports = nextConfig;
          EOF
          
          # Build with preview config
          cp next.config.preview.js next.config.js
          npx next build
        env:
          NODE_ENV: production

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./out
          destination_dir: ${{ steps.branch-info.outputs.preview-path }}
          keep_files: true

      - name: Comment on PR with preview link
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ steps.branch-info.outputs.branch-name }}';
            const author = '${{ steps.branch-info.outputs.author }}';
            const previewPath = '${{ steps.branch-info.outputs.preview-path }}';
            const previewUrl = `https://${{ github.repository_owner }}.github.io/klh-frontend/${previewPath}/`;
            const commitSha = '${{ github.sha }}';
            
            // Find existing preview comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const previewComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üöÄ Preview Environment')
            );
            
            const commentBody = `## üöÄ Preview Environment Deployed!
            
            | Info | Details |
            |------|---------|
            | **üë§ Author** | @${author} |
            | **üåø Branch** | \`${branchName}\` |
            | **üîó Preview URL** | [View Preview](${previewUrl}) |
            | **üìù Commit** | \`${commitSha.substring(0, 7)}\` |
            | **‚è∞ Updated** | ${new Date().toLocaleString()} |
            
            ---
            
            > üí° This preview updates automatically with each push to the branch.
            > üßπ Preview will be cleaned up automatically when PR is closed.`;
            
            if (previewComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: previewComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

      - name: Output preview info
        run: |
          echo "üéâ Preview deployed successfully!"
          echo "üë§ Author: ${{ steps.branch-info.outputs.author }}"
          echo "üåø Branch: ${{ steps.branch-info.outputs.branch-name }}"
          echo "üîó Preview URL: https://${{ github.repository_owner }}.github.io/klh-frontend/${{ steps.branch-info.outputs.preview-path }}/"

  # Cleanup preview when PR is closed
  cleanup-preview:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    
    steps:
      - name: Extract cleanup info
        id: cleanup-info
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          AUTHOR="${{ github.event.pull_request.user.login }}"
          CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
          
          echo "author=$AUTHOR" >> $GITHUB_OUTPUT
          echo "clean-branch=$CLEAN_BRANCH" >> $GITHUB_OUTPUT
          echo "preview-path=preview/$AUTHOR/$CLEAN_BRANCH" >> $GITHUB_OUTPUT

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove preview directory
        run: |
          PREVIEW_PATH="${{ steps.cleanup-info.outputs.preview-path }}"
          
          if [ -d "$PREVIEW_PATH" ]; then
            rm -rf "$PREVIEW_PATH"
            
            # Configure git
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            
            # Commit changes
            git add .
            git commit -m "üßπ Remove preview for ${{ steps.cleanup-info.outputs.author }}/${{ github.head_ref }}" || echo "No changes to commit"
            git push
            
            echo "‚úÖ Cleaned up preview for ${{ steps.cleanup-info.outputs.author }}/${{ github.head_ref }}"
          else
            echo "‚ÑπÔ∏è No preview directory found to clean up"
          fi

      - name: Comment cleanup status
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `üßπ **Preview environment cleaned up**
              
              The preview for this PR has been automatically removed.`
            });
